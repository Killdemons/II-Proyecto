/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ii.proyecto;

import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author bcamp
 */
public class Laberinto extends javax.swing.JFrame {

    int column = 10, row = 7, puntos = 0;
    String matriz[][] = new String[row][column];
    String mat = "";
    String[] questions = {"¿Es el mouse un dispositivo de salida?", "¿Una impresora con escáner es considerada solamente entrada?", 
                          "¿Estaba el teclado integrado a las primeras computadoras personales?", "¿La computadora ENIAC salió al mercado hace 71 años?",
                          "Está correcta la siguiente estructura de programación: \n" +
                            "int cont=0;\n" +
                            "While ( cont>0){\n" +
                            "cont +=1;\n" +
                            "System.out.println('hola mundo');\n" +
                            "}",
                          "La única manera de crear una interfaz gráfica en Java es común Jframe . Es la oración pasada verdadera o falsa",
                          "El nombre del profesor es Alejandro Álvarez Quezada La oración pasada es verdadera o falsa",
                          "La herramienta de programación Eclipse utiliza Java. La oración pasada es verdadera o falsa",
                          "La primera computadora personal era del tamaño de una habitación. La oracion pasada es verdadera o falsa ",
                          "Es Microsoft Word utilizado en el mundo de la ofimática. La oracion pasada es verdadera o falsa ",
                          "Es Magali Hamilton una de las pioneras de la programación que llegó el Apolo 11 a la luna",
                          "Las RAM DDR5 son las mas nuevas en el mercado. La oracion pasada es verdadera o falsa ",
                          "Las tarjetas  de Red siempre son componentes integrados en una PC. La oracion pasada es verdadera o falsa ",
                          "java fue introducido en el mercado en 1991. La oracion pasada es verdadera o falsa ",
                          "El Teclado de ofocina conasta de 105  teclas. La oracion pasada es verdadera o falsa "
    
    };
    int[] answers = {0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0};
    Random rand = new Random();

    public Laberinto() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnLaberinto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLaberinto = new javax.swing.JTextArea();
        btnArriba = new javax.swing.JButton();
        btnAbajo = new javax.swing.JButton();
        btnDerecha = new javax.swing.JButton();
        btnIzquierda = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        getContentPane().add(btnIniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 60, -1));

        btnLaberinto.setText("Crear Laberinto");
        btnLaberinto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaberintoActionPerformed(evt);
            }
        });
        getContentPane().add(btnLaberinto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 130, -1));

        txtLaberinto.setEditable(false);
        txtLaberinto.setBackground(new java.awt.Color(240, 240, 240));
        txtLaberinto.setColumns(20);
        txtLaberinto.setFont(new java.awt.Font("Monospaced", 0, 28)); // NOI18N
        txtLaberinto.setRows(5);
        jScrollPane1.setViewportView(txtLaberinto);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 300, 310));

        btnArriba.setText("↑");
        btnArriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArribaActionPerformed(evt);
            }
        });
        getContentPane().add(btnArriba, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, -1, -1));

        btnAbajo.setText("↓");
        btnAbajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbajoActionPerformed(evt);
            }
        });
        getContentPane().add(btnAbajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        btnDerecha.setText("→");
        btnDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerechaActionPerformed(evt);
            }
        });
        getContentPane().add(btnDerecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, -1, -1));

        btnIzquierda.setText("←");
        btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzquierdaActionPerformed(evt);
            }
        });
        getContentPane().add(btnIzquierda, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        jLabel2.setText("X = Jugador");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jLabel3.setText("֍ = Meta");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jLabel4.setText("© = Comodin");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel1.setText("Puntaje");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        jLabel5.setText("0");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        btnIniciar.setEnabled(false);
        mat = "";
        if (" ".equals(matriz[1][1])) {
            matriz[1][1] = "X";
        }
        if (" ".equals(matriz[5][8])) {
            matriz[5][8] = "֍";
        }
        while (true) {
            int n1 = rand.nextInt(row);
            int n2 = rand.nextInt(column);
            if (" ".equals(matriz[n1][n2])) {
                matriz[n1][n2] = "©";
                break;
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                mat += matriz[i][j];
            }
            mat += "\n";
        }
        txtLaberinto.removeAll();
        txtLaberinto.setText(mat);
        JOptionPane.showMessageDialog(null, "Juego iniciado, favor usar los botones en pantalla para moverse");
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnLaberintoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaberintoActionPerformed
        mat = "";
        int cont = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if (i == 1 && j == 1 || i == 2 && j == 1 || i == 1 && j == 2 || i == 5 && j == 8) {
                    matriz[i][j] = " ";
                } else if ((j == 0 && (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6)) || (j == 9 && (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6)) || (i == 0 && (j == 0 || j == 1 || j == 2 || j == 3 || j == 4 || j == 5 || j == 6 || j == 7 || j == 8 || j == 9)) || (i == 6 && (j == 0 || j == 1 || j == 2 || j == 3 || j == 4 || j == 5 || j == 6 || j == 7 || j == 8 || j == 9))) {
                    matriz[i][j] = "*";
                } else {
                    if (cont < 10 && rand.nextInt(2) == 1) {
                        matriz[i][j] = "#";
                        cont++;
                    } else {
                        matriz[i][j] = " ";
                    }
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                mat += matriz[i][j];
            }
            mat += "\n";
        }
        txtLaberinto.setText(mat);

    }//GEN-LAST:event_btnLaberintoActionPerformed

    private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
        mat = "";
        int num = rand.nextInt(3);
        int respuesta = JOptionPane.showOptionDialog(null, questions[num], "Pregunta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Verdadero", "Falso"}, "Verdadero");
        if (respuesta == answers[num]) {
            int option = JOptionPane.showOptionDialog(null, "¿Que decea hacer?", "Opciones", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Quitar trampa", "Comodin"}, "Quitar trampa");
            if (option == 0) {
                while (true) {
                    String f = JOptionPane.showInputDialog("Digite la fila donde se encuentra la trampa");
                    String c = JOptionPane.showInputDialog("Digite la columna donde se encuentra la trampa");
                    if (matriz[Integer.parseInt(f)][Integer.parseInt(c)].equals("#")) {
                        matriz[Integer.parseInt(f)][Integer.parseInt(c)] = " ";
                        break;
                    }
                }
            } else {
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        if ("©".equals(matriz[i][j])) {
                            matriz[i][j] = " ";
                        }
                    }
                }
                Comodin v = new Comodin();
                v.setVisible(true);
            }
            puntos++;
            jLabel5.setText(""+puntos);
            for (int i = 0; i < row; i++) {
                OUTER:
                for (int j = 0; j < column; j++) {
                    if ("X".equals(matriz[i][j])) {
                        if (null != matriz[i][j + 1]) {
                            switch (matriz[i][j + 1]) {
                                case "#":
                                    JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                    Laberinto ven = new Laberinto();
                                    ven.setVisible(true);
                                    dispose();
                                    break OUTER;
                                case " ":
                                    matriz[i][j] = " ";
                                    matriz[i][j + 1] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    break OUTER;
                                case "©":
                                    matriz[i][j] = " ";
                                    matriz[i][j + 1] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    i = row;
                                    JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                    Comodin v = new Comodin();
                                    v.setVisible(true);
                                    break;
                                case "֍":
                                    JOptionPane.showMessageDialog(null, "Juego Completado");
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Respuesta Incorrecta, se ha generado una nueva trampa");
            while (true) {
                int f = rand.nextInt(row);
                int c = rand.nextInt(column);
                if (matriz[f][c].equals(" ")) {
                    matriz[f][c] = "#";
                    break;
                }
            }
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    mat += matriz[i][j];
                }
                mat += "\n";
            }
            txtLaberinto.setText(mat);
            puntos--;
            jLabel5.setText(""+puntos);
        }
    }//GEN-LAST:event_btnDerechaActionPerformed

    private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed
        mat = "";
        int num = rand.nextInt(3);
        int respuesta = JOptionPane.showOptionDialog(null, questions[num], "Pregunta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Verdadero", "Falso"}, "Verdadero");
        if (respuesta == answers[num]) {
            int option = JOptionPane.showOptionDialog(null, "¿Que decea hacer?", "Opciones", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Quitar trampa", "Comodin"}, "Quitar trampa");
            if (option == 0) {
                while (true) {
                    String f = JOptionPane.showInputDialog("Digite la fila donde se encuentra la trampa");
                    String c = JOptionPane.showInputDialog("Digite la columna donde se encuentra la trampa");
                    if (matriz[Integer.parseInt(f)][Integer.parseInt(c)].equals("#")) {
                        matriz[Integer.parseInt(f)][Integer.parseInt(c)] = " ";
                        break;
                    }
                }
            } else {
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        if ("©".equals(matriz[i][j])) {
                            matriz[i][j] = " ";
                        }
                    }
                }
                Comodin v = new Comodin();
                v.setVisible(true);
            }
            puntos++;
            jLabel5.setText(""+puntos);
            for (int i = 0; i < row; i++) {
                OUTER:
                for (int j = 0; j < column; j++) {
                    if ("X".equals(matriz[i][j])) {
                        if (null != matriz[i][j - 1]) {
                            switch (matriz[i][j - 1]) {
                                case "#":
                                    JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                    Laberinto ven = new Laberinto();
                                    ven.setVisible(true);
                                    dispose();
                                    break OUTER;
                                case " ":
                                    matriz[i][j] = " ";
                                    matriz[i][j - 1] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    break OUTER;
                                case "©":
                                    matriz[i][j] = " ";
                                    matriz[i][j - 1] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    i = row;
                                    JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                    Comodin v = new Comodin();
                                    v.setVisible(true);
                                    break;
                                case "֍":
                                    JOptionPane.showMessageDialog(null, "Juego Completado");
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Respuesta Incorrecta, se ha generado una nueva trampa");
            while (true) {
                int f = rand.nextInt(row);
                int c = rand.nextInt(column);
                if (matriz[f][c].equals(" ")) {
                    matriz[f][c] = "#";
                    break;
                }
            }
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    mat += matriz[i][j];
                }
                mat += "\n";
            }
            txtLaberinto.setText(mat);
            puntos--;
            jLabel5.setText(""+puntos);
        }
    }//GEN-LAST:event_btnIzquierdaActionPerformed

    private void btnArribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArribaActionPerformed
        mat = "";
        int num = rand.nextInt(3);
        int respuesta = JOptionPane.showOptionDialog(null, questions[num], "Pregunta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Verdadero", "Falso"}, "Verdadero");
        if (respuesta == answers[num]) {
            int option = JOptionPane.showOptionDialog(null, "¿Que decea hacer?", "Opciones", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Quitar trampa", "Comodin"}, "Quitar trampa");
            if (option == 0) {
                while (true) {
                    String f = JOptionPane.showInputDialog("Digite la fila donde se encuentra la trampa");
                    String c = JOptionPane.showInputDialog("Digite la columna donde se encuentra la trampa");
                    if (matriz[Integer.parseInt(f)][Integer.parseInt(c)].equals("#")) {
                        matriz[Integer.parseInt(f)][Integer.parseInt(c)] = " ";
                        break;
                    }
                }
            } else {
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        if ("©".equals(matriz[i][j])) {
                            matriz[i][j] = " ";
                        }
                    }
                }
                Comodin v = new Comodin();
                v.setVisible(true);
            }
            puntos++;
            jLabel5.setText(""+puntos);
            for (int i = 0; i < row; i++) {
                OUTER:
                for (int j = 0; j < column; j++) {
                    if ("X".equals(matriz[i][j])) {
                        if (null != matriz[i - 1][j]) {
                            switch (matriz[i - 1][j]) {
                                case "#":
                                    JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                    Laberinto ven = new Laberinto();
                                    ven.setVisible(true);
                                    dispose();
                                    break OUTER;
                                case " ":
                                    matriz[i][j] = " ";
                                    matriz[i - 1][j] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    break OUTER;
                                case "©":
                                    matriz[i][j] = " ";
                                    matriz[i - 1][j] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    i = row;
                                    JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                    Comodin v = new Comodin();
                                    v.setVisible(true);
                                    break;
                                case "֍":
                                    JOptionPane.showMessageDialog(null, "Juego Completado");
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Respuesta Incorrecta, se ha generado una nueva trampa");
            while (true) {
                int f = rand.nextInt(row);
                int c = rand.nextInt(column);
                if (matriz[f][c].equals(" ")) {
                    matriz[f][c] = "#";
                    break;
                }
            }
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    mat += matriz[i][j];
                }
                mat += "\n";
            }
            txtLaberinto.setText(mat);
            puntos--;
            jLabel5.setText(""+puntos);
        }
    }//GEN-LAST:event_btnArribaActionPerformed

    private void btnAbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbajoActionPerformed
        mat = "";
        int num = rand.nextInt(3);
        int respuesta = JOptionPane.showOptionDialog(null, questions[num], "Pregunta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Verdadero", "Falso"}, "Verdadero");
        if (respuesta == answers[num]) {
            int option = JOptionPane.showOptionDialog(null, "¿Que decea hacer?", "Opciones", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Quitar trampa", "Comodin"}, "Quitar trampa");
            if (option == 0) {
                while (true) {
                    String f = JOptionPane.showInputDialog("Digite la fila donde se encuentra la trampa");
                    String c = JOptionPane.showInputDialog("Digite la columna donde se encuentra la trampa");
                    if (matriz[Integer.parseInt(f)][Integer.parseInt(c)].equals("#")) {
                        matriz[Integer.parseInt(f)][Integer.parseInt(c)] = " ";
                        break;
                    }
                }
            } else {
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        if ("©".equals(matriz[i][j])) {
                            matriz[i][j] = " ";
                        }
                    }
                }
                Comodin v = new Comodin();
                v.setVisible(true);
            }
            puntos++;
            jLabel5.setText(""+puntos);
            for (int i = 0; i < row; i++) {
                OUTER:
                for (int j = 0; j < column; j++) {
                    if ("X".equals(matriz[i][j])) {
                        if (null != matriz[i + 1][j]) {
                            switch (matriz[i + 1][j]) {
                                case "#":
                                    JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                    Laberinto ven = new Laberinto();
                                    ven.setVisible(true);
                                    dispose();
                                    break OUTER;
                                case " ":
                                    matriz[i][j] = " ";
                                    matriz[i + 1][j] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    i = row;
                                    break OUTER;
                                case "©":
                                    matriz[i][j] = " ";
                                    matriz[i + 1][j] = "X";
                                    for (int x = 0; x < row; x++) {
                                        for (int y = 0; y < column; y++) {
                                            mat += matriz[x][y];
                                        }
                                        mat += "\n";
                                    }
                                    txtLaberinto.setText(mat);
                                    i = row;
                                    JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                    Comodin v = new Comodin();
                                    v.setVisible(true);
                                    break;
                                case "֍":
                                    JOptionPane.showMessageDialog(null, "Juego Completado");
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Respuesta Incorrecta, se ha generado una nueva trampa");
            while (true) {
                int f = rand.nextInt(row);
                int c = rand.nextInt(column);
                if (matriz[f][c].equals(" ")) {
                    matriz[f][c] = "#";
                    break;
                }
            }
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    mat += matriz[i][j];
                }
                mat += "\n";
            }
            txtLaberinto.setText(mat);
            puntos--;
            jLabel5.setText(""+puntos);        }
    }//GEN-LAST:event_btnAbajoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Menu ven = new Menu();
        ven.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Laberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Laberinto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbajo;
    private javax.swing.JButton btnArriba;
    private javax.swing.JButton btnDerecha;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnIzquierda;
    private javax.swing.JButton btnLaberinto;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtLaberinto;
    // End of variables declaration//GEN-END:variables
}
