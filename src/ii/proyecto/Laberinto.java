/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ii.proyecto;

import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author bcamp
 */
public class Laberinto extends javax.swing.JFrame {

    int column=10, row=7;
    String matriz [][] = new String [row][column];
    String mat = "";
    
    
    
    
    public Laberinto() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnLaberinto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLaberinto = new javax.swing.JTextArea();
        btnD = new javax.swing.JButton();
        btnW = new javax.swing.JButton();
        btnA = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnW1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        getContentPane().add(btnIniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 60, -1));

        btnLaberinto.setText("Crear Laberinto");
        btnLaberinto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaberintoActionPerformed(evt);
            }
        });
        getContentPane().add(btnLaberinto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 130, -1));

        txtLaberinto.setEditable(false);
        txtLaberinto.setBackground(new java.awt.Color(240, 240, 240));
        txtLaberinto.setColumns(20);
        txtLaberinto.setFont(new java.awt.Font("Monospaced", 0, 28)); // NOI18N
        txtLaberinto.setRows(5);
        jScrollPane1.setViewportView(txtLaberinto);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 300, 310));

        btnD.setText("→");
        btnD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDActionPerformed(evt);
            }
        });
        getContentPane().add(btnD, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, -1, -1));

        btnW.setText("↓");
        btnW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWActionPerformed(evt);
            }
        });
        getContentPane().add(btnW, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        btnA.setText("←");
        btnA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAActionPerformed(evt);
            }
        });
        getContentPane().add(btnA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        jLabel2.setText("X = Jugador");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        btnW1.setText("↑");
        btnW1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnW1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnW1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, -1, -1));

        jLabel3.setText("֍ = Meta");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jLabel4.setText("© = Comodin");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if(" ".equals(matriz[1][1])){
            matriz[1][1]="X";
        }
        if(" ".equals(matriz[5][8])){
            matriz[5][8]="֍";
        }
        Random rand = new Random();
        while(true){
            int n1 = rand.nextInt(row);
            int n2 = rand.nextInt(column);
            if(" ".equals(matriz[n1][n2])){
                matriz[n1][n2]="©";
                break;
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                mat+=matriz[i][j];
            }
            mat+="\n";
        }
        txtLaberinto.setText(mat);
        JOptionPane.showMessageDialog(null, "Juego iniciado, favor usar los botones en pantalla para moverse");
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnLaberintoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaberintoActionPerformed
        Random rand = new Random();
        int cont=0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if(i==1 && j==1 || i==2 && j==1 || i==1 && j==2 || i==5 && j==8){
                    matriz[i][j]=" ";
                }
                else if((j==0 && (i==0 || i==1 || i==2 || i==3 || i==4 || i==5 || i==6)) || (j==9 && (i==0 || i==1 || i==2 || i==3 || i==4 || i==5 || i==6)) || (i==0 && (j==0 || j==1 || j==2 || j==3 || j==4 || j==5 || j==6 || j==7 || j==8 || j==9)) || (i==6 && (j==0 || j==1 || j==2 || j==3 || j==4 || j==5 || j==6 || j==7 || j==8 || j==9))){
                    matriz[i][j]="*";
                }
                else{
                    if(cont<10 && rand.nextInt(2)==1){
                        matriz[i][j]="#";
                        cont++;
                    }
                    else{
                        matriz[i][j]=" ";
                    }
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                mat+=matriz[i][j];
            }
            mat+="\n";
        }
        txtLaberinto.setText(mat);
    }//GEN-LAST:event_btnLaberintoActionPerformed

    private void btnDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDActionPerformed
        for (int i = 0; i < row; i++) {
            OUTER:
            for (int j = 0; j < column; j++) {
                if ("X".equals(matriz[i][j])) {
                    if (null != matriz[i][j+1]) {
                        switch (matriz[i][j+1]) {
                            case "#":
                                JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                Laberinto ven = new Laberinto();
                                ven.setVisible(true);
                                dispose();
                                break OUTER;
                            case " ":
                                matriz[i][j] = " ";
                                matriz[i][j+1] = "X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }       txtLaberinto.setText(mat);
                                break OUTER;
                            case "©":
                                matriz[i][j]=" ";
                                matriz[i][j+1]="X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }
                                txtLaberinto.setText(mat);
                                i=row;
                                JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                Comodin v = new Comodin();
                                v.setVisible(true);
                                break;
                            case "֍":
                                JOptionPane.showMessageDialog(null, "Juego Completado");
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDActionPerformed

    private void btnAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAActionPerformed
        for (int i = 0; i < row; i++) {
            OUTER:
            for (int j = 0; j < column; j++) {
                if ("X".equals(matriz[i][j])) {
                    if (null != matriz[i][j-1]) {
                        switch (matriz[i][j-1]) {
                            case "#":
                                JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                Laberinto ven = new Laberinto();
                                ven.setVisible(true);
                                dispose();
                                break OUTER;
                            case " ":
                                matriz[i][j] = " ";
                                matriz[i][j-1] = "X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }       txtLaberinto.setText(mat);
                                break OUTER;
                            case "©":
                                matriz[i][j]=" ";
                                matriz[i][j-1]="X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }
                                txtLaberinto.setText(mat);
                                i=row;
                                JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                Comodin v = new Comodin();
                                v.setVisible(true);
                                break;
                            case "֍":
                                JOptionPane.showMessageDialog(null, "Juego Completado");
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnAActionPerformed

    private void btnW1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnW1ActionPerformed
        for (int i = 0; i < row; i++) {
            OUTER:
            for (int j = 0; j < column; j++) {
                if ("X".equals(matriz[i][j])) {
                    if (null != matriz[i-1][j]) {
                        switch (matriz[i-1][j]) {
                            case "#":
                                JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                Laberinto ven = new Laberinto();
                                ven.setVisible(true);
                                dispose();
                                break OUTER;
                            case " ":
                                matriz[i][j] = " ";
                                matriz[i-1][j] = "X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }       txtLaberinto.setText(mat);
                                break OUTER;
                            case "©":
                                matriz[i][j]=" ";
                                matriz[i-1][j]="X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }
                                txtLaberinto.setText(mat);
                                i=row;
                                JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                Comodin v = new Comodin();
                                v.setVisible(true);
                                break;
                            case "֍":
                                JOptionPane.showMessageDialog(null, "Juego Completado");
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnW1ActionPerformed

    private void btnWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWActionPerformed
        for (int i = 0; i < row; i++) {
            OUTER:
            for (int j = 0; j < column; j++) {
                if ("X".equals(matriz[i][j])) {
                    if (null != matriz[i+1][j]) {
                        switch (matriz[i+1][j]) {
                            case "#":
                                JOptionPane.showMessageDialog(null, "Game Over, no puede tocar ninguna trampa");
                                Laberinto ven = new Laberinto();
                                ven.setVisible(true);
                                dispose();
                                break OUTER;
                            case " ":
                                matriz[i][j] = " ";
                                matriz[i+1][j] = "X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }
                                txtLaberinto.setText(mat);
                                i=row;
                                break OUTER;
                            case "©":
                                matriz[i][j]=" ";
                                matriz[i+1][j]="X";
                                for (int x = 0; x < row; x++) {
                                    for (int y = 0; y < column; y++) {
                                        mat+=matriz[x][y];
                                    }
                                    mat+="\n";
                                }
                                txtLaberinto.setText(mat);
                                i=row;
                                JOptionPane.showMessageDialog(null, "Comodin encontrado");
                                Comodin v = new Comodin();
                                v.setVisible(true);
                                break;
                            case "֍":
                                JOptionPane.showMessageDialog(null, "Juego Completado");
                                Laberinto vent = new Laberinto();
                                vent.setVisible(true);
                                dispose();
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnWActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Menu ven = new Menu();
        ven.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Laberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Laberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Laberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Laberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Laberinto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnA;
    private javax.swing.JButton btnD;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnLaberinto;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnW;
    private javax.swing.JButton btnW1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtLaberinto;
    // End of variables declaration//GEN-END:variables
}
